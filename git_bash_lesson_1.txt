 TXT
 1. Создать внешний репозиторий c названием TXT.
 # заходим на наш гит и создаем репозиторий - "TXT".

 2. Клонировать репозиторий TXT на локальный компьютер.
 # git clone "ссылка на наш репозиторий" (предварительно заходим в директорию куда хотим клонировать)

 3. Внутри локального TXT создать файл “new.txt”
 # cat > new.txt

 4. Добавить файл под гит
 # git add new.txt или git add . (точка означает, что добавляем все файлы)

 5. Закоммитить файл.
 # git commit -m "some text"

 6. Отправить файл на внешний GitHub репозиторий. 
 # git push
 
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
 # cat >> new.txt

 # вводим следующее:
 name: Deni
 age: 24
 pets: 2
 salary: 1000$

 
 8. Отправить изменения на внешний репозиторий.
 # git commit -m "any text"
 # git push
 
 9. Создать файл preferences.txt
 # cat > preferences.txt

 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 # cat >> preferences.txt
 # вводим следующее:
   favourite film - can't choose the only one
   fav tv show - stranger things
   fav fav food - pizza
   fav season - summer
   fav country - it is obvious, but it is USA

 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 # cat > skills
 # вводим следующее:
  1. basic theory
  2. basic linux commands
  3. git hub commands
  4. postman
  5. etc etc etc.

 12. Сделать коммит в одну строку.
 # git commit -am "any text"

 13. Отправить сразу 2 файла на внешний репозиторий.
 # git push

 14. На веб интерфейсе создать файл bug_report.txt.
 # идем на гит и создаем файл "bug_report.txt"

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 # сохраняем изменения

 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 # изменяем файл

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 # сохраняем изменения

 18. Синхронизировать внешний и локальный репозиторий TXT
 # git pull




 JSON
 19. Создать внешний репозиторий c названием JSON.
 # заходим на наш гит и создаем репозиторий - "JSON"

 20. Клонировать репозиторий JSON на локальный компьютер.
 # git clone "ссылка на наш репозиторий" (предварительно заходим в директорию куда хотим клонировать)

 21. Внутри локального JSON создать файл “new.json”.
 # cat > new.json
 
 22. Добавить файл под гит.
 # git add new.json или git add . (точка означает, что добавляем все файлы)
 
 23. Закоммитить файл.
 # git commit -m "some text"

 24. Отправить файл на внешний GitHub репозиторий.
 # git push

 25. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 # cat >> new.json

 # вводим следующее:
 {
	"name": "Deni",
	"age": 24,
	"pets": 2,
	"salary": "1000$"
}



 26. Отправить изменения на внешний репозиторий.
 # git commit -m "any text"
 # git push

 27. Создать файл preferences.json
 # cat > preferences.json

 28. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
 # cat >> preferences.json или vim preferences.json

{
	"favouriteFilm": "have a lot of favoutite films",
	"tvShow": "stranger things",
	"favouriteFood": "pizza",
	"seasonOfTheYear": "summer",
	"country": "USA, Canada, Japan"
}


 29. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
 # cat > skills.json
 # {
	"skills": ["sql", "postman", "at least 1 programming language at the basic level", "API", "linux temrinal", "etc"]
}

 30. Отправить сразу 2 файла на внешний репозиторий.
 # git commit -am "any text"
 
 31. На веб интерфейсе создать файл bug_report.json.
 32. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 33. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 34. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 35. Синхронизировать внешний и локальный репозиторий JSON

XML
 36. Создать внешний репозиторий c названием XML.
 37. Клонировать репозиторий XML на локальный компьютер.
 38. Внутри локального XML создать файл “new.xml”.
 39. Добавить файл под гит.
 40. Закоммитить файл.
 41. Отправить файл на внешний GitHub репозиторий.
 42. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
 43. Отправить изменения на внешний репозиторий.
 44. Создать файл preferences.xml
 45. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 46. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 47. Сделать коммит в одну строку.
 48. Отправить сразу 2 файла на внешний репозиторий.
 49. На веб интерфейсе создать файл bug_report.xml.
 50. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 51. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 52. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 53. Синхронизировать внешний и локальный репозиторий XML