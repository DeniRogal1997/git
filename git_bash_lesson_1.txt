 TXT
 1. Создать внешний репозиторий c названием TXT.
 # 1) заходим на гит в наш аккаунт;
   2) в верхней части можно увидеть вкладку "Repositories/Репозитории" или можно нажать на иконку с нашим профилем в правом верхнем углу и откроется выпадающее меню, где можно также выбрать "Репозитории";
   3) при переходе на вкладку репозитории необходимо создать новый репозиторий, это можно сделать нажав на кнопку "New". Далее вписываем необходимое имя репозитория и сохраняем наш репозиторий. Репозиторий должен быть публичный, чтобы другие люди смогли проверить ваше дз.
   4) после создания репозитория мы автоматически оказываемся внутри него, далее нам необходимо нажать на кнопку "Code", что даст нам возможность увидеть ссылку на наш репозиторий для клонирования.

 2. Клонировать репозиторий TXT на локальный компьютер.
 # git clone "ссылка на наш репозиторий" (предварительно заходим в директорию куда хотим клонировать)

 3. Внутри локального TXT создать файл “new.txt”
 # cat > new.txt

 4. Добавить файл под гит
 # git add new.txt или git add . (точка означает, что добавляем все файлы)

 5. Закоммитить файл.
 # git commit -m "some text"

 6. Отправить файл на внешний GitHub репозиторий. 
 # git push
 
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
 # cat >> new.txt

 # вводим следующее:
 name: Deni
 age: 24
 pets: 2
 salary: 1000$

 
 8. Отправить изменения на внешний репозиторий.
 # git commit -am "any text"
 # git push
 
 9. Создать файл preferences.txt
 # cat > preferences.txt

 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 # cat >> preferences.txt
 # вводим следующее:
   favourite film - can't choose the only one
   fav tv show - stranger things
   fav fav food - pizza
   fav season - summer
   fav country - it is obvious, but it is USA

 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 # cat > skills
 # вводим следующее:
  1. basic theory
  2. basic linux commands
  3. git hub commands
  4. postman
  5. etc etc etc.

 12. Сделать коммит в одну строку.
 # git add . && git commit -m "comment" (сначала добавляем все файлы, где были сделаны изменения через точку, а затем коммитим в одну строку)

 13. Отправить сразу 2 файла на внешний репозиторий.
 # git push

 14. На веб интерфейсе создать файл bug_report.txt.
 # 1) заходим в репозиторий "TXT";
   2) создаем файл нажав на кнопку "Add file", далее выбираем "Create a new file";
   3) задаем нужное наименование файла.

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 # сохраняем изменения нажав на кнопку "Commit new file"

 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 # 1) выбираем наш файл
   2) нажимаем на кнопку "Редактирование"

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 # сохраняем изменения нажав на кнопку "Commit changes"

 18. Синхронизировать внешний и локальный репозиторий TXT
 # git pull




 JSON
 19. Создать внешний репозиторий c названием JSON.
 # 1) заходим на гит в наш аккаунт;
   2) в верхней части можно увидеть вкладку "Repositories/Репозитории" или можно нажать на иконку с нашим профилем в правом верхнем углу и откроется выпадающее меню, где можно также выбрать "Репозитории";
   3) при переходе на вкладку репозитории необходимо создать новый репозиторий, это можно сделать нажав на кнопку "New". Далее вписываем необходимое имя репозитория и сохраняем наш репозиторий. Репозиторий должен быть публичный, чтобы другие люди смогли проверить ваше дз.
   4) после создания репозитория мы автоматически оказываемся внутри него, далее нам необходимо нажать на кнопку "Code", что даст нам возможность увидеть ссылку на наш репозиторий для клонирования.

 20. Клонировать репозиторий JSON на локальный компьютер.
 # git clone "ссылка на наш репозиторий" (предварительно заходим в директорию куда хотим клонировать)

 21. Внутри локального JSON создать файл “new.json”.
 # cat > new.json
 
 22. Добавить файл под гит.
 # git add new.json или git add . (точка означает, что добавляем все файлы)
 
 23. Закоммитить файл.
 # git commit -m "some text"

 24. Отправить файл на внешний GitHub репозиторий.
 # git push

 25. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 # cat >> new.json

 # вводим следующее:
 {
	"name": "Deni",
	"age": 24,
	"pets": 2,
	"salary": "1000$"
}



 26. Отправить изменения на внешний репозиторий.
 # git commit -am "any text"
 # git push

 27. Создать файл preferences.json
 # cat > preferences.json

 28. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
 # cat >> preferences.json или vim preferences.json

{
	"favouriteFilm": "have a lot of favoutite films",
	"tvShow": "stranger things",
	"favouriteFood": "pizza",
	"seasonOfTheYear": "summer",
	"country": "USA, Canada, Japan"
}


 29. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
 # cat > skills.json
 # {
	"skills": ["sql", "postman", "at least 1 programming language at the basic level", "API", "linux temrinal", "etc"]
}

 30. Отправить сразу 2 файла на внешний репозиторий.
 # git add . && git commit -m "comment" && git push (сначала добавляем все файлы, где были сделаны изменения через точку, а затем коммитим и пушим на внешний репозиторий)
 
 31. На веб интерфейсе создать файл bug_report.json.
 # 1) заходим в репозиторий "JSON";
   2) создаем файл нажав на кнопку "Add file", далее выбираем "Create a new file";
   3) задаем нужное наименование файла.

 32. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 # сохраняем изменения нажав на кнопку "Commit new file"

 33. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 # 1) выбираем наш файл
   2) нажимаем на кнопку "Редактирование"

 34. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 # сохраняем изменения нажав на кнопку "Commit changes"

 35. Синхронизировать внешний и локальный репозиторий JSON
 # git pull






XML
 36. Создать внешний репозиторий c названием XML.
 # 1) заходим на гит в наш аккаунт;
   2) в верхней части можно увидеть вкладку "Repositories/Репозитории" или можно нажать на иконку с нашим профилем в правом верхнем углу и откроется выпадающее меню, где можно также выбрать "Репозитории";
   3) при переходе на вкладку репозитории необходимо создать новый репозиторий, это можно сделать нажав на кнопку "New". Далее вписываем необходимое имя репозитория и сохраняем наш репозиторий. Репозиторий должен быть публичный, чтобы другие люди смогли проверить ваше дз.
   4) после создания репозитория мы автоматически оказываемся внутри него, далее нам необходимо нажать на кнопку "Code", что даст нам возможность увидеть ссылку на наш репозиторий для клонирования.
 
 37. Клонировать репозиторий XML на локальный компьютер.
 # git clone "ссылка на наш репозиторий" (предварительно заходим в директорию куда хотим клонировать)

 38. Внутри локального XML создать файл “new.xml”.
 # cat > new.mxl
 
 39. Добавить файл под гит.
 # git add new.xml
 
 40. Закоммитить файл.
 # git commit -m "any text"
 
 41. Отправить файл на внешний GitHub репозиторий.
 # git push
 
 42. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
 # cat >> new.xml
 # вводим следующее:

 <basic information>
	<name>Deni</name>
	<age>24</age>
	<pets>2</pets>
	<salary>1000$</salary>
 </basic information>

 
 43. Отправить изменения на внешний репозиторий.
 # git commit -am "any text"
 # git push
 
 44. Создать файл preferences.xml
 # cat > preferences.mxl
 
 45. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 # cat >> preferences.xml
 # вводим следующее:
 
<preferences>
	<favourite_film>can't choose only one</favourite_film>
	<favourite_tv_show>stranger things</favourite_tv_show>
	<favourite_food>pizza</favourite_food>
	<favourite_season>summer</favourite_season>
	<favourite_country>USA, Canada, Japan</favourite_country>
</preferences>
 
 46. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 #cat > skills.mxl
 # вводим следующее:

 <skills>
	<theory>what is bug, types of testing etc...</theory>
	<sql>basic sql requests: select, update, join, delete</sql>
	<postman>structure "key": "value" etc...</postman>
	<API>api</API>
	<terminal>basic linux commands</terminal>
	<git>basic git commands</git>
	<etc>and a lot of other things as charles, fiddler etc...</etc>
 </skills>
 
 47. Сделать коммит в одну строку.
 # git add . && git commit -m "comment" (сначала добавляем все файлы, где были сделаны изменения через точку, а затем коммитим)

 
 48. Отправить сразу 2 файла на внешний репозиторий.
 #git push
 
 49. На веб интерфейсе создать файл bug_report.xml.
 # 1) заходим в репозиторий "XML";
   2) создаем файл нажав на кнопку "Add file", далее выбираем "Create a new file";
   3) задаем нужное наименование файла.
 
 50. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 # сохраняем изменения нажав на кнопку "Commit new file"
 
 51. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 # 1) выбираем наш файл
   2) нажимаем на кнопку "Редактирование"
 
 52. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 # сохраняем изменения нажав на кнопку "Commit changes"
 
 53. Синхронизировать внешний и локальный репозиторий XML
 # git pull
 